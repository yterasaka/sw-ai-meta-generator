!function(){var e={141:function(){let{Application:e}=Shopware;class t{constructor(e,t){this.httpClient=e,this.loginService=t}generateMetadata(e){let t=this.getBasicHeaders();return this.httpClient.post("_action/ai-meta-generator/generate",e,{headers:t}).then(e=>(console.log("HTTP request successful:",e),e.data)).catch(e=>{throw console.error("HTTP request failed:",e),console.error("Error response:",e.response),console.error("Error status:",e.response?.status),console.error("Error data:",e.response?.data),e})}getBasicHeaders(){return{Accept:"application/vnd.api+json",Authorization:`Bearer ${this.loginService.getToken()}`,"Content-Type":"application/json"}}}e.addServiceProvider("aiMetaGeneratorApiService",r=>new t(e.getContainer("init").httpClient,r.loginService))}},t={};function r(a){var o=t[a];if(void 0!==o)return o.exports;var s=t[a]={exports:{}};return e[a](s,s.exports,r),s.exports}r.p="bundles/aimetagenerator/",window?.__sw__?.assetPath&&(r.p=window.__sw__.assetPath+"/bundles/aimetagenerator/"),function(){"use strict";r(141);let{Component:e,Mixin:t}=Shopware;e.override("sw-product-seo-form",{template:'{% block sw_product_seo_form_keywords %}\n    {% parent %}\n    \n    {% block sw_product_seo_form_ai_generator_button %}\n    <div class="sw-field sw-field--default">\n        <div class="sw-field__label">\n            <label class="sw-field__label-text">\n                {{ $tc(\'sw-product.seoForm.generateMetadataLabel\') }}\n            </label>\n            <sw-help-text \n                :text="$tc(\'sw-product.seoForm.generateMetadataHelpText\')">\n            </sw-help-text>\n        </div>\n        <div class="sw-field__content">\n            <sw-button \n                variant="primary" \n                size="small"\n                :disabled="isGenerating || !canGenerateMetadata"\n                :isLoading="isGenerating"\n                @click="onGenerateMetadata">\n                {{ $tc(\'sw-product.seoForm.generateMetadata\') }}\n            </sw-button>\n        </div>\n    </div>\n    {% endblock %}\n{% endblock %}',inject:["aiMetaGeneratorApiService"],mixins:[t.getByName("notification")],data(){return{isGenerating:!1}},computed:{canGenerateMetadata(){return this.product&&this.product.name&&""!==this.product.name.trim()&&this.product.description&&""!==this.product.description.trim()}},methods:{async onGenerateMetadata(){if(!this.product){this.createNotificationError({message:this.$tc("sw-product.seoForm.errorProductNotFound")});return}if(!this.canGenerateMetadata){this.createNotificationError({message:this.$tc("sw-product.seoForm.errorMissingRequiredFields")});return}this.isGenerating=!0,console.log("Starting metadata generation...");try{let e=Shopware.Context.api.languageId,t={productId:this.product.id,productName:this.product.name,description:this.product.description,languageId:e};console.log("Calling API service with data:",t);let r=await this.aiMetaGeneratorApiService.generateMetadata(t);if(console.log("API service response:",r),r.success)this.updateProductMetadata(r.data),this.createNotificationSuccess({message:this.$tc("sw-product.seoForm.metadataGeneratedSuccess")});else throw Error(r.error||"Unknown error occurred")}catch(e){console.error("Error generating metadata:",e),this.createNotificationError({message:this.$tc("sw-product.seoForm.errorGeneratingMetadata")+": "+e.message})}finally{this.isGenerating=!1,console.log("Metadata generation completed")}},updateProductMetadata(e){if(!this.product){console.error("Product not found");return}e.metaTitle&&this.$set(this.product,"metaTitle",e.metaTitle),e.metaDescription&&this.$set(this.product,"metaDescription",e.metaDescription),e.keywords&&this.$set(this.product,"keywords",e.keywords),this.$emit("product-changed"),console.log("Product metadata updated:",{metaTitle:this.product.metaTitle,metaDescription:this.product.metaDescription,keywords:this.product.keywords})}}})}()}();