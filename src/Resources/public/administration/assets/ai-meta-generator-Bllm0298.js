const{Application:s}=Shopware;class n{constructor(t,r){this.httpClient=t,this.loginService=r}generateMetadata(t){const r=this.getBasicHeaders();return this.httpClient.post("_action/ai-meta-generator/generate",t,{headers:r}).then(o=>(console.log("HTTP request successful:",o),o.data)).catch(o=>{var a,i;throw console.error("HTTP request failed:",o),console.error("Error response:",o.response),console.error("Error status:",(a=o.response)==null?void 0:a.status),console.error("Error data:",(i=o.response)==null?void 0:i.data),o})}getBasicHeaders(){return{Accept:"application/vnd.api+json",Authorization:`Bearer ${this.loginService.getToken()}`,"Content-Type":"application/json"}}}s.addServiceProvider("aiMetaGeneratorApiService",e=>{const t=s.getContainer("init");return new n(t.httpClient,e.loginService)});const c=`{% block sw_product_seo_form_keywords %} {% parent %} {% block sw_product_seo_form_ai_generator_button %} <div class="sw-field sw-field--default"> <div class="sw-field__label"> <label class="sw-field__label-text"> {{ $tc('sw-product.seoForm.generateMetadataLabel') }} </label> <sw-help-text :text="$tc('sw-product.seoForm.generateMetadataHelpText')"> </sw-help-text> </div> <div class="sw-field__content"> <sw-button variant="primary" size="small" :disabled="isGenerating || !canGenerateMetadata" :isLoading="isGenerating" @click="onGenerateMetadata"> {{ $tc('sw-product.seoForm.generateMetadata') }} </sw-button> </div> </div> {% endblock %} {% endblock %}`,{Component:d,Mixin:l}=Shopware;d.override("sw-product-seo-form",{template:c,inject:["aiMetaGeneratorApiService"],mixins:[l.getByName("notification")],data(){return{isGenerating:!1}},computed:{canGenerateMetadata(){return this.product&&this.product.name&&this.product.name.trim()!==""&&this.product.description&&this.product.description.trim()!==""}},methods:{async onGenerateMetadata(){if(!this.product){this.createNotificationError({message:this.$tc("sw-product.seoForm.errorProductNotFound")});return}if(!this.canGenerateMetadata){this.createNotificationError({message:this.$tc("sw-product.seoForm.errorMissingRequiredFields")});return}this.isGenerating=!0,console.log("Starting metadata generation...");try{const e=Shopware.Context.api.languageId,t={productId:this.product.id,productName:this.product.name,description:this.product.description,languageId:e};console.log("Calling API service with data:",t);const r=await this.aiMetaGeneratorApiService.generateMetadata(t);if(console.log("API service response:",r),r.success)this.updateProductMetadata(r.data),this.createNotificationSuccess({message:this.$tc("sw-product.seoForm.metadataGeneratedSuccess")});else throw new Error(r.error||"Unknown error occurred")}catch(e){console.error("Error generating metadata:",e),this.createNotificationError({message:this.$tc("sw-product.seoForm.errorGeneratingMetadata")+": "+e.message})}finally{this.isGenerating=!1,console.log("Metadata generation completed")}},updateProductMetadata(e){if(!this.product){console.error("Product not found");return}e.metaTitle&&(this.product.metaTitle=e.metaTitle),e.metaDescription&&(this.product.metaDescription=e.metaDescription),e.keywords&&(this.product.keywords=e.keywords),this.$emit("product-changed"),console.log("Product metadata updated:",{metaTitle:this.product.metaTitle,metaDescription:this.product.metaDescription,keywords:this.product.keywords})}}});
//# sourceMappingURL=ai-meta-generator-Bllm0298.js.map
